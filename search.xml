<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>什么是分布式协调技术？</title>
      <link href="/2019/11/10/%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/11/10/%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>分布式协调技术主要用来解决分布式环境当中多个进程之间的同步控制，让他们有序的去访问某种临界资源，防止造成”脏数据”的后果。</p><p><img src="%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF/01.png" alt></p><img src="/2019/11/10/什么是分布式协调技术/01.png" title="This is an example image"><p>在这图中有三台机器，每台机器各跑一个应用程序。然后我们将这三台机器通过网络将其连接起来，构成一个系统来为用户提供服务，对用户来说这个系统的架构是透明的，他感觉不到我这个系统是一个什么样的架构。那么我们就可以把这种系统称作一个<font color="red">分布式系统</font>。</p><p>在这个分布式系统中如何对进程进行调度，我假设在第一台机器上挂载了一个资源，然后这三个物理分布的进程都要竞争这个资源，但我们又不希望他们同时进行访问，这时候我们就需要一个协调器，来让他们有序的来访问这个资源。这个协调器就是我们经常提到的那个锁，比如说”进程-1”在使用该资源的时候，会先去获得锁，”进程1”获得锁以后会对该资源保持独占，这样其他进程就无法访问该资源，”进程1”用完该资源以后就将锁释放掉，让其他进程来获得锁，那么通过这个锁机制，我们就能保证了分布式系统中多个进程能够有序的访问该临界资源。那么我们把这个分布式环境下的这个锁叫作分布式锁。这个分布式锁也就是我们分布式协调技术实现的核心内容。</p><p><img src="%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF%5C%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.png" alt></p><img src="/2019/11/10/什么是分布式协调技术/分布式锁.png" title="This is an example image"><p><a href="https://www.funtl.com/zh/apache-dubbo-zookeeper/%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%8A%80%E6%9C%AF.html#%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">參考</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构遇到什么问题?</title>
      <link href="/2019/11/10/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%81%87%E5%88%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
      <url>/2019/11/10/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%81%87%E5%88%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="四大问题-（高可用-高并发-高性能）"><a href="#四大问题-（高可用-高并发-高性能）" class="headerlink" title="四大问题 （高可用  高并发  高性能）"></a>四大问题 （高可用  高并发  高性能）</h1><p><font color="red">最大问题 -&gt; 网络是不可靠的 </font></p><hr><p>1、客户端如何访问这么多的服务</p><ul><li>通过API网关访问</li></ul><hr><p>2、 服务与服务之间是如何通信的</p><ul><li><p>同步通信: </p><p> HTTP(Apache Http Client)</p><p> RPC(Dubbo 只支  Java，Apache Thrift，gRPC)</p></li></ul><ul><li><p>异步通信: </p><p> 消息队列  kafka  RabbitMQ RocketMQ</p></li></ul><hr><p>3、 这么多的服务，如何管理</p><ul><li><p>服务治理 </p><p> 3.1、服务注册与发现</p><pre><code>基于客户端的服务注册与发现  Apache Zookeeper基于服务端的服务注册与发现  Netflix Eureka</code></pre></li></ul><hr><p>4、 服务挂了，怎么办 </p><ul><li>重试机制</li><li>服务熔断</li><li>服务降级</li><li>服务限流</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/07/hello-world/"/>
      <url>/2019/11/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图像风格迁移实现通过OpenCv显示并连接打印机打印</title>
      <link href="/2019/10/04/Image-style-transfer/"/>
      <url>/2019/10/04/Image-style-transfer/</url>
      
        <content type="html"><![CDATA[<h1 id="1、使用教程"><a href="#1、使用教程" class="headerlink" title="1、使用教程"></a>1、使用教程</h1><h2 id="1-1-、安装环境"><a href="#1-1-、安装环境" class="headerlink" title="1.1 、安装环境"></a>1.1 、安装环境</h2><p><a href="https://github.com/yaolong1/pyimagesearch-neural-style-transfer-master" target="_blank" rel="noopener">demo地址</a></p><p>下载后目录结构如下</p><hr><p><img src="Image-style-transfer/catalogue.png" alt><br></p><img src="/2019/10/04/Image-style-transfer/catalogue.png" title="This is an example image"><hr><p>python环境  python 3.6.x </p><p>用pip安装好以下环境</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br><span class="line">pip install imutils</span><br><span class="line">pip install itertools</span><br><span class="line">pip install argparse</span><br></pre></td></tr></table></figure><hr><h2 id="1-2、测试"><a href="#1-2、测试" class="headerlink" title="1.2、测试"></a>1.2、测试</h2><p>进入项目根目录 命令行输入以下命令：</p><pre><code>python neural_style_transfer_video.py --models models</code></pre><hr><p><font color="red"><h2>运行成功!!如下图：<h2><font> </font></h2></h2></font></p><p><img src="Image-style-transfer/test.png" alt><br></p><img src="/2019/10/04/Image-style-transfer/test.png" title="This is an example image"><p><font color="red">有问题的联系QQ：<font color="red">1638538651<font></font></font></font></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python+tensorflow-gpu+openpose实现人体骨骼识别</title>
      <link href="/2019/09/24/python-tensorflow-gpu-openpose/"/>
      <url>/2019/09/24/python-tensorflow-gpu-openpose/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/yaolong1/tf-pose-estimation" target="_blank" rel="noopener">项目地址</a></h2><h3 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h3><ul><li>tensorflow-gpu  1.4.0+</li><li>python 3.6.X</li><li>OpenCV-python   3.x</li></ul><p>以上这几个环境直接 pip install xxx 下载就行<br></p><hr><p>1、首先从<a href="https://github.com/yaolong1/tf-pose-estimation" target="_blank" rel="noopener">仓库中</a>下载demo<br><br>下载完成后demo项目结构如下<br></p><p><img src="python-tensorflow-gpu-openpose/demo_mulu.png" alt><br></p><img src="/2019/09/24/python-tensorflow-gpu-openpose/demo_mulu.png" title="This is an example image"><p>进入tf-pose-estimation</p><pre><code>cd tf-pose-estimation\</code></pre><hr><p> 下载依赖库</p><pre><code>pip install -r requirements.txt</code></pre><p>  requirements.txt文件里面是一些库的名称，一些以上命令即可下载项目运行所需的库<br></p><p>  在安装pycocotools时可能会报错，pycocotools安装需要Visual C++ Build Tools，可以在<a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/" target="_blank" rel="noopener">官网</a>下载安装，一路默认安装即可<br></p><p>  除此之外，还需要安装Cython，直接pip即可 pip install Cython<br></p><hr><p>执行命令完成之后进入项目根目录tf-pose-estimation下执行运行程序<br></p><pre><code>python run_webcam.py --model=mobilenet_thin --resize=432x368 --camera=0</code></pre><p>resize=432x368代表显示窗口大小，camera=0 0表示为本机摄像头，也可以使用网络摄像头将0替换成摄像头的rtsp地址<br></p><hr><p>运行时可能报OpenPose ImportError: No module named ‘_pafprocess’ 错误执行以下命令<br></p><pre><code>cd tf_pose/pafprocessswig -python -c++ pafprocess.i &amp;&amp; python setup.py build_ext --inplace</code></pre><p>此时提示你没有安装 swig 可以进入<a href="https://sourceforge.net/projects/swig/files/swigwin/swigwin-4.0.1/swigwin-4.0.1.zip/download?use_mirror=nchc" target="_blank" rel="noopener">官网下载</a><br></p><p>添加环境变量到path， 比如： D:安装路径\swigwin-3.0.12 <br></p><pre><code>swig --help #测试一下是否生效</code></pre><hr><pre><code>swig -python -c++ pafprocess.i &amp;&amp; python setup.py build_ext --inplace #再次执行此语句</code></pre><p>执行 python run_webcam.py文件 </p><pre><code>python run_webcam.py --model=mobilenet_thin --resize=432x368 --camera=0</code></pre><h3 id="运行成功！！"><a href="#运行成功！！" class="headerlink" title="运行成功！！"></a>运行成功！！</h3><p>   <img src="python-tensorflow-gpu-openpose/succese.png" alt><br><br>   <img src="/2019/09/24/python-tensorflow-gpu-openpose/succese.png" title="This is an example image"></p><p> <font color="red">在此过程中可能会遇到一些网速较慢而无法下载完成的库，可以根据报错提示在码云仓库里面下在没安装好的库！<font></font></font></p><p> 有问题的联系QQ：<font color="red">1638538651<font></font></font></p><p> 参考：</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/2019/09/24/zookeeper/"/>
      <url>/2019/09/24/zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="1、服务注册与发现"><a href="#1、服务注册与发现" class="headerlink" title="1、服务注册与发现"></a>1、服务注册与发现</h1><img src="/2019/09/24/zookeeper/zookeeper服务注册与发现.png" title="This is an example image"><hr><h1 id="2、集群崩溃与恢复"><a href="#2、集群崩溃与恢复" class="headerlink" title="2、集群崩溃与恢复"></a>2、集群崩溃与恢复</h1><hr><img src="/2019/09/24/zookeeper/zookeeper集群崩溃和恢复.png" title="This is an example image"><h1 id="3、数据一致性原理"><a href="#3、数据一致性原理" class="headerlink" title="3、数据一致性原理"></a>3、数据一致性原理</h1><hr><img src="/2019/09/24/zookeeper/zookeeper数据一致性原理.png" title="This is an example image"><h1 id="4、zookeeper实现分布式锁"><a href="#4、zookeeper实现分布式锁" class="headerlink" title="4、zookeeper实现分布式锁"></a>4、zookeeper实现分布式锁</h1><hr><p>临时有序节点实现分布式锁  通过watch观察</p><p><a href="https://www.funtl.com/zh/apache-dubbo-zookeeper/Zookeeper-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91" target="_blank" rel="noopener">详情</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是spring</title>
      <link href="/2019/09/24/spring%E6%98%AF%E4%BB%80%E4%B9%88%E5%91%A2/"/>
      <url>/2019/09/24/spring%E6%98%AF%E4%BB%80%E4%B9%88%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是spring？"><a href="#什么是spring？" class="headerlink" title="什么是spring？"></a>什么是spring？</h1><hr><p>正规回答是：</p><p>   spring是一个轻量级的JavaEE框架,主要作用是解决企业及开发的复杂度问题，而复杂度问题就是耦合度，所以spring就是为了解耦，他是怎么解耦的呢？他有个东西两个东西解耦，一个是ioc，一个是aop</p><h2 id="那么什么是IOC呢？"><a href="#那么什么是IOC呢？" class="headerlink" title="那么什么是IOC呢？"></a>那么什么是IOC呢？</h2><p> 举个例子： </p><p>  就拿找对象来说吧，男人嘛难免会寂寞，我们寝室里面就有一个天天思春的男人，想找对象，可是呢找对象谈何容易，要自己去问妹子的qq、名字，喜欢什么，有好感了之后还要聊天培养感情，然后就会觉得很麻烦。但是呢有一种地方很方便，叫什么会所来着，这个会所啊它会帮助思春的人找对象，只要你想找对象了就进去注册登记一下然后会所的前台就会提供各种各样符合你条件的妹子，这样就省去了很大的麻烦，不用自己去维护与妹子的关系，超赞！</p><p>  上述例子之中某某会所啊就是我们所说的ioc,就是维护关系的（你懂的）。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10下安装tensorflow-gpu</title>
      <link href="/2019/09/24/win10%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow-gpu/"/>
      <url>/2019/09/24/win10%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow-gpu/</url>
      
        <content type="html"><![CDATA[<h1 id="1、CUDA详细安装"><a href="#1、CUDA详细安装" class="headerlink" title="1、CUDA详细安装"></a>1、<a href="https://www.cnblogs.com/wanyu416/p/9536853.html" target="_blank" rel="noopener">CUDA详细安装</a></h1><h1 id="2、tensorflow-gpu-anaconda3-CUDA安装"><a href="#2、tensorflow-gpu-anaconda3-CUDA安装" class="headerlink" title="2、tensorflow-gpu+anaconda3+CUDA安装"></a>2、<a href="https://blog.csdn.net/weixin_39290638/article/details/80045236" target="_blank" rel="noopener">tensorflow-gpu+anaconda3+CUDA安装</a></h1>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot20道面试题</title>
      <link href="/2019/09/23/springboot20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/09/23/springboot20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot项目基础面试题"><a href="#springboot项目基础面试题" class="headerlink" title="springboot项目基础面试题"></a>springboot项目基础面试题</h1><hr><h3 id="1、什么是-Spring-Boot？"><a href="#1、什么是-Spring-Boot？" class="headerlink" title="1、什么是 Spring Boot？"></a>1、什么是 Spring Boot？</h3><p>Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。</p><hr><h3 id="2、springboot与spring的区别"><a href="#2、springboot与spring的区别" class="headerlink" title="2、springboot与spring的区别."></a>2、springboot与spring的区别.</h3><p>引用自官方说法: java在集成spring等框架需要作出大量的配置,开发效率低,繁琐.所以官方提出 spring boot的核心思想:习惯优于配置.可以快速创建开发基于spring框架的项目.或者支持可以不用或很少的spring配置即可</p><hr><h3 id="3、springboot的核心功能与使用优点"><a href="#3、springboot的核心功能与使用优点" class="headerlink" title="3、springboot的核心功能与使用优点."></a>3、springboot的核心功能与使用优点.</h3><p>核心功能:<br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">springboot项目为独立运行的spring项目,java -jar xx.jar即可运行.</span><br><span class="line">内嵌servlet容器(可以选择内嵌: tomcat ,jetty等服务器.).</span><br><span class="line">提供了starter的pom 配置 简化了 maven的配置.&lt;br/&gt;</span><br><span class="line">自动配置spring容器中的bean.当不满足实际开发场景,可自定义bean的自动化配置.</span><br><span class="line">准生产的应用监控(基于: ssh , http , telnet 对服务器运行的项目进行监控.).</span><br><span class="line">springboot无需做出xml配置,也不是通过代码生成来实现(通过条件注解.).</span><br></pre></td></tr></table></figure><p>使用优点:<br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">快速搭建项目,</span><br><span class="line">与主流框架集成无需配置集成.</span><br><span class="line">内嵌HTTP服务容器(tomcat ,jetty).</span><br><span class="line">具有应用监控.</span><br><span class="line">开发部署方便,后期与云计算平台集成方便(docket)</span><br><span class="line">独立运行</span><br></pre></td></tr></table></figure><hr><h3 id="4、Spring-Boot-的配置文件有哪几种格式？它们有什么区别？"><a href="#4、Spring-Boot-的配置文件有哪几种格式？它们有什么区别？" class="headerlink" title="4、Spring Boot 的配置文件有哪几种格式？它们有什么区别？"></a>4、Spring Boot 的配置文件有哪几种格式？它们有什么区别？</h3><p>格式主要分为两种： application.properties application.yml </p><p>区别：</p><pre><code>.properties和.yml是配置文件中的两种不同的后缀名；.yml拥有天然的树状结构；在properties文件中是以”.”进行分割的， 在.yml中是用”:”进行分割；.yml的数据格式是K-V格式（和json很像），并且通过”:”进行赋值；在.yml中缩进一定不能使用TAB，否则会报很奇怪的错误；每个k的冒号后面一定都要加一个空格；.yml比.properties对中文对支持更友好。</code></pre><h3 id="5、springboot核心启动类的作用、组成"><a href="#5、springboot核心启动类的作用、组成" class="headerlink" title="5、springboot核心启动类的作用、组成"></a>5、springboot核心启动类的作用、组成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      SpringApplication.run(Test.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类是spring的核心类，主要启动加载各种组件<br><br>@SpringBootApplication是核心注解，用于标识声明一个springboot框架容器.<br><br><font color="red">@SpringBootApplication</font>主要包含以下三个注解：<br><br><font color="red">@SpringBootConfiguration:</font>组合了 @Configuration 注解，实现配置文件的功能。<br><br><font color="red">@EnableAutoConfiguration:</font>打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能：</p><p> <code>@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。</code></p><p><font color="red">@ComponentScan：</font>Spring组件扫描。</p><hr><h3 id="6、Spring-Boot-的配置文件的作用？"><a href="#6、Spring-Boot-的配置文件的作用？" class="headerlink" title="6、Spring Boot 的配置文件的作用？"></a>6、Spring Boot 的配置文件的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.properties/bootstrap.yml //用于配置无需重写的系统常量,例如springcloud项目用到的config配置中心的连接属性等.加载优先级高于application.properties.</span><br><span class="line">application.properties/application.yml //用于配置重写springboot项目的默认框架属性,例如:重写tomcat,springmvc,日志框架等默认属性.主要提供给spring框架加载使用.</span><br><span class="line">注: properties后缀名与yml后缀名配置文件二选一即可. 两种不同格式的配置文件而已.</span><br></pre></td></tr></table></figure><hr><h3 id="7、开启-Spring-Boot-特性有哪几种方式？"><a href="#7、开启-Spring-Boot-特性有哪几种方式？" class="headerlink" title="7、开启 Spring Boot 特性有哪几种方式？"></a>7、开启 Spring Boot 特性有哪几种方式？</h3><p>1）继承spring-boot-starter-parent项目</p><p>2）导入spring-boot-dependencies项目依赖</p><hr><h3 id="8、Spring-Boot-需要独立的容器运行吗？"><a href="#8、Spring-Boot-需要独立的容器运行吗？" class="headerlink" title="8、Spring Boot 需要独立的容器运行吗？"></a>8、Spring Boot 需要独立的容器运行吗？</h3><p>不需要！springboot内置HTTP服务器(tomcat,jetty)</p><hr><h3 id="9、运行-Spring-Boot-有哪几种方式？"><a href="#9、运行-Spring-Boot-有哪几种方式？" class="headerlink" title="9、运行 Spring Boot 有哪几种方式？"></a>9、运行 Spring Boot 有哪几种方式？</h3><p>1）打包用命令运行或者容器里面运行<br>2）用Maven或者Gradle 插件运行<br>3）直接执行main函数运行</p><hr><h3 id="10、开启SpringBoot特性的几种方式是哪些？"><a href="#10、开启SpringBoot特性的几种方式是哪些？" class="headerlink" title="10、开启SpringBoot特性的几种方式是哪些？"></a>10、开启SpringBoot特性的几种方式是哪些？</h3><p>1)继承spring-boot-starter-parent项目<br>2)导入spring-boot-dependencies项目依赖 </p><hr><h3 id="11、Spring-Boot-自动配置原理是什么？"><a href="#11、Spring-Boot-自动配置原理是什么？" class="headerlink" title="11、Spring Boot 自动配置原理是什么？"></a>11、Spring Boot 自动配置原理是什么？</h3><p>注解<font color="red">@EnableAutoConfiguration</font>,<font color="red">@Configuration</font>，<font color="red">@ConditionalOnClass</font>就是自动配置的核心，首先它得是一个配置文件，其次根据类路径下是否有这个类去自动配置。  </p><hr><h3 id="12、Spring-Boot-的目录结构是怎样的？"><a href="#12、Spring-Boot-的目录结构是怎样的？" class="headerlink" title="12、Spring Boot 的目录结构是怎样的？"></a>12、Spring Boot 的目录结构是怎样的？</h3><p>结构如下：</p><pre><code class="text">+- javastack   +- MyApplication.java //启动类   |   +- customer   |   +- Customer.java //实体   |   +- CustomerController.java // 表现层   |   +- CustomerService.java //业务逻辑层   |   +- CustomerRepository.java  // 数据访问层   |   +- order       +- Order.java       +- OrderController.java       +- OrderService.java       +- OrderRepository.java</code></pre><h3 id="13、你如何理解-Spring-Boot-中的-Starters？"><a href="#13、你如何理解-Spring-Boot-中的-Starters？" class="headerlink" title="13、你如何理解 Spring Boot 中的 Starters？"></a>13、你如何理解 Spring Boot 中的 Starters？</h3><p>Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成 Spring 及其他技术，而不需要到处找示例代码和依赖包。如你想使用 Spring JPA 访问数据库，只要加入 spring-boot-starter-data-jpa 启动器依赖就能使用了。 </p><hr><h3 id="14、如何在-Spring-Boot-启动的时候运行一些特定的代码？"><a href="#14、如何在-Spring-Boot-启动的时候运行一些特定的代码？" class="headerlink" title="14、如何在 Spring Boot 启动的时候运行一些特定的代码？"></a>14、如何在 Spring Boot 启动的时候运行一些特定的代码？</h3><p>可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法</p><hr><h3 id="15、Spring-Boot-有哪几种读取配置的方式？"><a href="#15、Spring-Boot-有哪几种读取配置的方式？" class="headerlink" title="15、Spring Boot 有哪几种读取配置的方式？"></a>15、Spring Boot 有哪几种读取配置的方式？</h3><p>Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationProperties 来绑定变量 </p><hr><h3 id="16、Spring-Boot-支持哪些日志框架？推荐和默认的日志框架是哪个？"><a href="#16、Spring-Boot-支持哪些日志框架？推荐和默认的日志框架是哪个？" class="headerlink" title="16、Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？"></a>16、Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？</h3><p>Spring Boot 支持 Java Util Logging, Log4j2, Lockback 作为日志框架，如果你使用 Starters 启动器，Spring Boot 将使用 Logback 作为默认日志框架 </p><hr><h3 id="17、SpringBoot-实现热部署有哪几种方式？"><a href="#17、SpringBoot-实现热部署有哪几种方式？" class="headerlink" title="17、SpringBoot 实现热部署有哪几种方式？"></a>17、SpringBoot 实现热部署有哪几种方式？</h3><p>主要有两种方式：</p><p>Spring Loaded<br><br>Spring-boot-devtools </p><hr><h3 id="18、Spring-Boot-可以兼容老-Spring-项目吗，如何做？"><a href="#18、Spring-Boot-可以兼容老-Spring-项目吗，如何做？" class="headerlink" title="18、Spring Boot 可以兼容老 Spring 项目吗，如何做？"></a>18、Spring Boot 可以兼容老 Spring 项目吗，如何做？</h3><p>可以兼容，使用 @ImportResource 注解导入老 Spring 项目配置文件。</p><h3 id="19、Spring-Boot-如何定义多套不同环境配置？"><a href="#19、Spring-Boot-如何定义多套不同环境配置？" class="headerlink" title="19、Spring Boot 如何定义多套不同环境配置？"></a>19、Spring Boot 如何定义多套不同环境配置？</h3><p>提供多套配置文件，如：</p><pre><code>application.propertiesapplication-dev.propertiesapplication-test.propertiesapplication-prod.properties </code></pre><h3 id="20、Spring-Boot-2-X-有什么新特性？与-1-X-有什么区别？"><a href="#20、Spring-Boot-2-X-有什么新特性？与-1-X-有什么区别？" class="headerlink" title="20、Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？"></a>20、Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？</h3><pre><code>1） 配置变更2）JDK 版本升级3) 第三方类库升级4) 响应式 Spring 编程支持5) HTTP/2 支持906) 配置属性绑定</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言入门学习文档</title>
      <link href="/2019/09/22/go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
      <url>/2019/09/22/go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="go语言入门学习文档/go开发实战.doc">黑马go语言学习文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言环境变量配置</title>
      <link href="/2019/09/22/go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/22/go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>GOROOT就是go的安装路径</p><p>在~/.bash_profile中添加下面语句:</p><pre><code>GOROOT=/usr/local/goexport GOROOT</code></pre><p>当然, 要执行go命令和go工具, 就要配置go的可执行文件的路径:</p><p>操作如下:</p><p>在~/.bash_profile中配置如下:</p><pre><code>export $PATH:$GOROOT/bin</code></pre><p>如果是windows需要使用;符号分割两个路径, mac和类unix都是用:符号分割</p><p>GOPATH:</p><p>go install/go get和 go的工具等会用到GOPATH环境变量.</p><p>GOPATH是作为编译后二进制的存放目的地和import包时的搜索路径 (其实也是你的工作目录, 你可以在src下创建你自己的go源文件, 然后开始工作)。</p><p>GOPATH之下主要包含三个目录: bin、pkg、src</p><p>bin目录主要存放可执行文件; pkg目录存放编译好的库文件, 主要是*.a文件; src目录下主要存放go的源文件</p><p>不要把GOPATH设置成go的安装路径,</p><p>可以自己在用户目录下面创建一个目录, 如gopath</p><p>操作如下:</p><pre><code>cd ~mkdir gopath</code></pre><p>在~/.bash_profile中添加如下语句:</p><pre><code>GOPATH=/Users/username/gopath</code></pre><p>GOPATH可以是一个目录列表, go get下载的第三方库, 一般都会下载到列表的第一个目录里面</p><p>需要把GOPATH中的可执行目录也配置到环境变量中, 否则你自行下载的第三方go工具就无法使用了, 操作如下:</p><p>在~/bash_profile中配置,</p><pre><code>export $PATH:$GOPATH/bin</code></pre><p>创建一个go项目, 并且编译运行:</p><pre><code>mkdir goprojectcd goprojecttouch hello.go</code></pre><p>在hello.go中输入:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">      fmt.Println(<span class="string">"Hello, GO !"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目根目录下执行go build命令来构建你的项目, 构建后会生成hello文件</p><p>运行生成的文件./hello, terminal中输出: Hello, GO !</p><p>当然你也可以直接运行命令go run hello.go来执行程序.</p><p>如果要上述设置生效, 可以执行命令: source ~/.bash_profile, 上述所有操作均为mac系统下的操作, 如果是非mac系统, 请自行变通.</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java环境变量配置</title>
      <link href="/2019/08/21/java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE-1/"/>
      <url>/2019/08/21/java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><ul><li>首先需要在<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html" target="_blank" rel="noopener">官网下载</a>jdk JDK默认安装后jdk和jre都在<strong>C:\Program Files\Java</strong>目录下。<br><br><img src="java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE-1/01.png" alt><br></li></ul><hr><h2 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2.环境变量配置"></a>2.环境变量配置</h2><ul><li>配置环境变量：右击“我的电脑”–&gt;”属性”–&gt;”高级系统设置”–&gt;”高级”–&gt;”环境变量” <br><ul><li>在系统变量里新建”JAVA_HOME”变量，变量值为：C:\Program Files\Java\jdk1.8.0_60（根据自己的jdk的安装路径填写）<br><img src="/2019/08/21/java环境变量配置-1/02.png" title="This is an example image"><br></li><li>在系统变量里新建”classpath”变量，变量值为：<strong>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</strong><br></li><li>找到path变量（已存在不用新建）添加变量值:<strong>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</strong><br><br>注意变量值之间用”;”隔开。注意原来Path的变量值末尾有没有;号，如果没有，先输入;号再输入。如果你的系统是Windows10，就相对方便多了，不用担心这个”;”。<br></li></ul></li><li><strong>“Windows+R”</strong>–&gt;输入“<strong>cmd</strong>”–&gt;<strong>Enter</strong>，输入<strong>java -version</strong>(记得中间有个空格)，如果显示jdk版本信息就说明环境变量配置成功了。<br><img src="/2019/08/21/java环境变量配置-1/03.png" title="This is an example image"><br></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
